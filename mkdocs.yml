site_name: PDDM-iOS


nav:
  - Persistencia básica: 
    - Introducción: 'cap1/1.0_introduccion.md'
    - Sistema de archivos: 'cap1/1.1_sistema_de_archivos.md'
    - Serialización: 'cap1/1.2_serializacion.md'
    - Property lists: 'cap1/1.3_property_lists.md'
    - Preferencias: 'cap1/1.4_preferencias.md'
  - ¡Hola Core Data!. Una aplicación de ejemplo: 
    - Introducción a Core Data: 'cap3/3.1_intro.md'
    - Crear el stack de Core Data en iOS: 'cap3/3.2_stack.md'
    - Ejercicio parte I. almacenar datos: 'cap3/3.3_entidades.md'
    - Ejercicio parte II. recuperar los datos: 'cap3/3.4_recuperar_datos.md' 
    - Apéndice. Cómo examinar el almacenamiento persistente: 'cap3/apendice_ver_almacenamiento.md'        
  - Modelos de datos en Core Data: 
    - Crear y editar modelos: 'cap4/4.1_crear_modelo.md'
    - Modelar las entidades en código Swift: 'cap4/4.2_clases_propias.md'
    - CRUD en Core Data: 'cap4/4.3_CRUD.md'
    - Validaciones: 'cap4/4.4_validaciones.md'
    - Transformables: 'cap4/4.5_transformables.md'
    - Ejercicios de modelos de datos: 'cap4/4.6_ejercicios.md'
  # - Persistencia como servicio: 
  #   - Backend as a Service: 'cap11/1_introduccion_BAAS.md'
  #   - Gestión de usuarios en Firebase: 'cap11/2_gestion_usuarios.md'
  #   - Persistencia en Firebase: 'cap11/3_persistencia.md'
  #   - Ejercicios: 'cap11/4_ejercicios.md'   
  - Búsquedas en Core Data: 
    - Predicados: 'cap6/1_predicados.md'
    - Ordenación: 'cap6/2_ordenacion.md'
    - Ejercicios: 'cap6/3_ejercicios.md'
  - Tablas en Core Data: 
    - El "fetched results controller": 'cap7/1_el_frc.md'
    - Inicializar el "fetched results controller": 'cap7/2_configuracion_basica.md'
    - Mostrar los datos en la tabla: 'cap7/3_tabla.md'
    - Refrescar la tabla: 'cap7/4_refrescar_tabla.md'
    - Secciones de tabla automáticas: 'cap7/5_secciones.md'
    - Ejercicios: 'cap7/6_ejercicios.md'
  - Miniproyecto:
      - Enunciado: 'miniproyecto/restaurante.md'  
  - Migraciones de datos: 
    - Qué son las migraciones de datos: 'cap8/1_intro.md'
    - Versiones del modelo de datos: 'cap8/2_versiones.md'
    - Migraciones ligeras: 'cap8/3_migraciones_ligeras.md'
    - Migraciones pesadas: 'cap8/4_migraciones_pesadas.md'
    - Ejercicios: 'cap8/5_ejercicios.md'
    
  - Concurrencia. Contextos múltiples: 
    - Múltiples contextos para trabajos en background: 'cap9/1_background.md'
    - Comunicación entre contextos: 'cap9/2_comunicacion.md'
    - Contextos anidados: 'cap9/3_contextos_anidados.md'
    - Ejercicio: 'cap9/4_ejercicios.md'
  # - Miniproyecto:
  #    - Enunciado parte I: 'miniproyecto/restaurante_parte_1.md'  
  #    - Enunciado parte II: 'miniproyecto/restaurante_parte_2.md'  
  # - Material complementario. SQLite en iOS: 
  #  - Introducción: 'cap2/2.1_intro_SQLite.md'
  #  - El API de SQLIte: 'cap2/2.2_API_SQLite.md'
  #  - Frameworks para SQLite: 'cap2/2.3_frameworks.md'


theme:
    language: es
    name: 'material'
    palette:
        primary: 'Teal'
        accent: 'Teal'
    font:
        text: 'Roboto'
        code: 'Roboto Mono'
    logo: 'logo.png'

# Ponemos como idioma de búsqueda el inglés
# para conseguir que busque correctamente
# todas las palabras en castellano, sin eliminar
# los excesivos derivados que se definen en
# https://github.com/MihaiValentin/lunr-languages/blob/master/lunr.es.js

extra:
    search:
        language: 'en'

markdown_extensions:
    - admonition
    - codehilite:
        linenums: true
    - footnotes
    - meta
    - sane_lists
    - toc:
       permalink: true
       toc_depth: 3
    - pymdownx.superfences